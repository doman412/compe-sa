; KCPSM3 Program - Signal Analyzer/Generator
; Tom Hays - Clarkson University - March 2012
; Modified from "UART real time clock" code by:
; Ken Chapman - Xilinx Ltd - October 2003
; 
; Output directive
VHDL "ROM_form.vhd", "oscope.vhd", "oscope"
; 
; Port definitions
; 
UART_status_port    EQU       0                   ; UART status input
tx_half_full        EQU       1                   ; Transmitter     half full - bit0
tx_full             EQU       2                   ; FIFO               full - bit1
rx_half_full        EQU       4                   ; Receiver        half full - bit2
rx_full             EQU       8                   ; FIFO               full - bit3
rx_data_present     EQU       16                  ; data present - bit4
done_sending		EQU		  32				  ; done_sending - bit 5
; 
UART_reset_port		EQU		  0
UART_read_port      EQU       1                   ; UART Rx data input
; 
UART_write_port     EQU       1                   ; UART Tx data output
;
LED_port			EQU		  2					  ; LED port

;
ADC_start_port		EQU		  3

ADC_data_port		EQU		  2
ADC_status_port		EQU		  3
ADC_new_data		EQU		  1



;
; Constants
;
; ACK_SENDING			EQU		
; 
; Special Register usage
; 
UART_data           EQU       sF                  ; used to pass data to and from the UART
; 
store_pointer       EQU       sE                  ; used to pass location of data in scratch pad memory

ADC_data			EQU		  sD				  ; used for UART data
; 
; 
; 
; Scratch Pad Memory Locations
; 

; 
; Initialise the system
; 
; 
cold_start:                                       ; initialization
                   	OUT	 s0, UART_reset_port	  ; doesn't matter what we write
main_loop:			CALL read_and_send_one
					JUMP main_loop



read_and_send_one: 	CALL ADC_read
					LOAD UART_data, ADC_data
					CALL send_to_UART_sync
					RET

ADC_read:			OUT s0, ADC_start_port
poll_ADC_status:	IN s0, ADC_status_port
					TEST s0, ADC_new_data
					JUMP NZ, read_ADC_data
					JUMP poll_ADC_status
read_ADC_data:		IN ADC_data, ADC_data_port
					RET
					


send_to_UART_sync:	CALL send_to_UART
check_UART_status:	IN s0, UART_status_port
					TEST s0, done_sending
					JUMP Z, check_UART_status
					RET
					

; Read one character from the UART
; 
; Character read will be returned in a register called 'UART_data' and will be
; echoed to the UART transmitter.
; 
; The routine first tests the receiver FIFO buffer to see if data is present.
; If the FIFO is empty, the routine waits until there is a character to read.
 
; Registers used s0 and UART_data
; 
read_from_UART:     IN        s0, UART_status_port; test Rx_FIFO buffer
                    TEST      s0, rx_data_present
                    JUMP      NZ, read_character
; Perform useful operation whilst waiting
                    JUMP      read_from_UART
read_character:     IN        UART_data, UART_read_port; read from FIFO
				    CALL      send_to_UART        ; echo received character
                    RET       
; 
; 
; 
; Transmit one character to the UART
; 
; Character supplied in register called 'UART_data'.
; 
; The routine first tests the transmit FIFO buffer to see if it is full.
; If the FIFO is full, the routine waits until there is space which could
; be as long as it takes to transmit one complete character.
; 
; Baud Rate    Time per Character (10 bits)
; 9600           1,024us
; 19200             521us
; 38400             260us
; 57600             174us
; 115200              87us
; 
; 
; Registers used s0
; 
send_to_UART:       IN        s0, UART_status_port; test Tx_FIFO buffer
                    TEST      s0, tx_full
                    JUMP      Z, UART_write
; Perform useful operation whilst waiting
                    JUMP      send_to_UART
UART_write:         OUT       UART_data, UART_write_port
					OUT		  UART_data, LED_port
                    RET       


                    ORG       $3FC
ISR:                RETI      ENABLE              ; TODO implement
; 
; Interrupt vector
; 
                    ORG       $3FF
					JUMP      ISR
